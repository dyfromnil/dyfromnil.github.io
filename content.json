{"pages":[],"posts":[{"title":"C++ snippet","text":"部分有必要记录一下的c++片段，值得记录一下。 函数参数传递数组 如果非要用指向数组的指针或者数组的引用，那么有两种方式(以打印数组内容并改变a[4]为例)： main函数123456789int main(int argv, char **){ int a[5] = {1, 2, 3, 4, 5}; len(&amp;a); // len(a); for (auto &amp;value : a) std::cout &lt;&lt; value &lt;&lt; std::endl; return 0;} 指向数组的指针123456789void len(int (*a)[5]){ // a是一个指向数组的指针，所以想要操作这个数组需要使用*a std::cout &lt;&lt; std::end(*a) - std::begin(*a) &lt;&lt; std::endl; for (auto &amp;value : *a) std::cout &lt;&lt; value &lt;&lt; std::endl; // ()必须加，优先级问题 (*a)[3] = 100;} 数组的引用1234567void len(int (&amp;a)[5]){ std::cout &lt;&lt; std::end(a) - std::begin(a) &lt;&lt; std::endl; for (auto &amp;value : a) std::cout &lt;&lt; value &lt;&lt; std::endl; a[3] = 100;}","link":"/2020/03/02/C-snippet/"},{"title":"ssh使用ngrok进行内网穿透","text":"ngrok 配置（无域名，直接使用IP地址） ngrok 客户端开机自启动配置 prerequisite golang环境配置 ngrok服务端相应端口开启 拉取源码1git clone https://github.com/inconshreveable/ngrok.git 根据IP地址生成证书1export NGROK_DOMAIN=xx.xx.xx.xx #IP地址 生成证书123456789openssl genrsa -out rootCA.key 2048openssl req -x509 -new -nodes -key rootCA.key -subj &quot;/CN=$NGROK_DOMAIN&quot; -days 5000 -out rootCA.pemopenssl genrsa -out device.key 2048openssl req -new -key device.key -subj &quot;/CN=$NGROK_DOMAIN&quot; -out device.csr#使用IP生成证书需要这步echo subjectAltName = IP:xx.xx.xx.xx &gt; extfile.cnf#加上 -extfile extfile.cnfopenssl x509 -req -in device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 5000 -extfile extfile.cnf 替换为自己的证书123cp rootCA.pem assets/client/tls/ngrokroot.crtcp device.crt assets/server/tls/snakeoil.crtcp device.key assets/server/tls/snakeoil.key 编译ngrok服务端和客户端12make release-servermake release-client ngrokd为服务端程序ngrok为客户端程序需要分别放到服务端和客户端 启动服务端1./ngrokd -domain=NGROK_DOMAIN -httpAddr=&quot;:9001&quot; -httpsAddr=&quot;:9002&quot; -tunnelAddr=&quot;:4443&quot; &gt; ngrok.log 2&gt;&amp;1 &amp; httpAddr为http端口httpsAddr为https端口tunnelAddr为与客户端交互的端口（默认为4443）只配置ssh的话，http和https端口用不上，但是仍然需要设置，否则报错（可随意设置） 客户端新建配置文件ngrok.cfg，写入如下内容12server_addr: &quot;xx.xx.xx.xx:4443&quot;trust_host_root_cert: false 启动ssh穿透1nohup ./ngrok -config=ngrok-config --proto=tcp 22 -log=ngrok.log &amp; 开机自启动经常需要重启，需要保证重启后自动启动ngrok服务 创建/home/apsong/ngrok_config/ngrok.sh文件 12path=$(cd `dirname $0`; pwd)./ngrok -config=$path/ngrok-config --proto=tcp 22 -log=ngrok.log &amp; 赋予可执行权限 1chmod +x ngrok.sh 转到/lib/systemd/system目录下，创建 ngrok.service 文件 1234567891011121314151617[Unit]Description=DY's ngrok[Service]User=rootGroup=rootType=forkingExecStart=/home/apsong/ngrok_config/ngrok.shExecStop=/bin/kill $MAINPIDExecReload=/bin/kill -s HUP $MAINPIDPrivateTmp=true[Install]WantedBy=multi-user.target 重新加载配置 1sudo systemctl daemon-reload 设置开机启动 1systemctl enable ngrok.service","link":"/2020/09/14/ngrok-ssh/"},{"title":"科学上网-vps配置","text":"整理了一份科学上网指南，包括: vps服务器的配置 客户端的配置 网络加速方案 shadowsocks基本原理shadowsocks可以指一种SOCKS5的加密传输协议，也可以指基于这种加密协议的各种数据传输包。shadowsocks正常工作需要服务器端和客户端两端合作实现，首先，客户端（本机）通过ss（shadowsocks）对正常的访问请求进行SOCK5加密，将加密后的访问请求传输给ss服务器端，服务器端接收到客户端的加密请求后，解密得到原始的访问请求，根据请求内容访问指定的网站（例如Google，YouTube，Facebook，instagram等），得到网站的返回结果后，再利用SOCKS5加密并返回给客户端，客户端通过ss解密后得到正常的访问结果，于是造成了你可以直接访问该网站的“假象”。 vps服务器的选择服务器的购买推荐Vultr和搬瓦工，这两个vps服务商是比较大的厂商，比较稳定（不会跑路喽）。不过近年来国内用的人比较多，所以经常会分配到已经被封的ip（搬瓦工似乎是保证开到的ip绝对可用）。 本指南中搭建shadowsocks/shadowsocksR的shell脚本，适用Vultr的和搬瓦工所有机型（CentOS、Ubuntu、Debian），搭建的ss服务器支持所有客户端类型（iOS，Android，Windows，Mac，Linux）。 脚本搭建SS/SSR服务连接vps服务器服务器购买完成后可以通过Xshell,PuTTY等工具，或者直接通过terminal进行ssh连接。这是PuTTY的连接界面： 服务器的ip和root登录密码可以在自己vps账户的服务器信息页面查看： 连接成功: 连接上服务器后就可以将后续的脚本命令直接复制到命令行中执行了。 声明：本指南中搭建服务的脚本由flyzy所写，源代码（https://github.com/flyzy2005/ss-fly）已不可访问，现在的这份脚本为本人fork而来。 搭建ShadowSocks(SS) 注意： shadowsocks和shadowsocksR只需要搭建其中一个就行了，具体搭建哪个随便自己。 1.下载SS脚本（只需要执行一次，卸载SS后也不需要重新执行，卸载不会删除下载的文件） 1git clone https://github.com/dyfromnil/ss-fly 如果提示 `bash: git: command not found` ,则需要先安装git。 Centos执行这个: 1yum -y install git Ubuntu/Debian执行这个: 1apt-get update &amp;&amp; apt-get -y install git 2.运行搭建SS的代码 1ss-fly/ss-fly.sh -i password port password和port分别改为自己设置的shadowsocks密码和端口号，搭建成功的界面如下： 注：如果需要改密码或者改端口，只需要重新再执行一次搭建ss脚本代码就可以了，或者修改/etc/shadowsocks.json 这个配置文件。 3.SS相关命令 123456789启动：/etc/init.d/ss-fly start停止：/etc/init.d/ss-fly stop重启：/etc/init.d/ss-fly restart状态：/etc/init.d/ss-fly status查看ss链接：ss-fly/ss-fly.sh -sslink修改配置文件：vim /etc/shadowsocks.json卸载ss服务：ss-fly/ss-fly.sh -uninstall 搭建shadowsocksR(SSR) 注：如果安装了SS，就不需要再安装SSR了，如果要改装SSR，请按照SS的相关命令先卸载SS！！！ 1.下载SSR脚本（只需要执行一次，卸载SSR后也不需要重新执行，卸载不会删除下载的文件） 1git clone https://github.com/dyfromnil/ss-fly 此步骤与搭建SS一致，可以参考：下载SS脚本。 2.运行搭建SSR的代码 1ss-fly/ss-fly.sh -ssr 3.输入相应的参数 执行完上述的脚本代码后，会进入到输入参数的界面，包括服务器端口，密码，加密方式，协议，混淆。可以直接输入回车选择默认值，也可以输入相应的值选择对应的选项： 搭建成功的界面如下： 4.SSR相关命令 12345678910启动：/etc/init.d/shadowsocks start停止：/etc/init.d/shadowsocks stop重启：/etc/init.d/shadowsocks restart状态：/etc/init.d/shadowsocks status配置文件路径：/etc/shadowsocks.json日志文件路径：/var/log/shadowsocks.log代码安装目录：/usr/local/shadowsocks卸载SSR服务：./shadowsocksR.sh uninstall 加速方案目前比较主流的加速方案有： 锐速 原版BBR 魔改BBR KCPTUN 速度比较： KCPTUN &gt; 魔改BBR &gt; 锐速 &gt; 原版BBR 安装难易度（由易到难）： 原版BBR &gt; 魔改BBR &gt; 锐速 &gt; KCPTUN 下面介绍原版BBR加速和kcptun加速的配置过程 BBR加速和kcptun加速只要安装其中一个就行了，当然，两者并不冲突，可以同时安装，不过加速效果不叠加。不想麻烦的话直接BBR加速就足够了，对延迟和速度要求高一点并且自己爱折腾的话可以配置kcptun加速。 BBR加速BBR是Google的一套拥塞控制算法，用在VPS服务器上，可以有效减少拥堵丢包，大幅提高网络连接速度。目前Linux类系统的最新内核，都已内置BBR。而我们购买VPS服务器时安装的系统，一般都不是最新的内核。在CentOS、Debian、Ubuntu等Linux系统上，可以通过升级最新内核的方式，获取BBR。 BBR支持4.9以上的，如果低于这个版本则会自动下载最新内容版本的内核后开启BBR加速并 重启，如果高于4.9以上则自动开启BBR加速，执行如下脚本命令即可自动开启BBR加速： 1ss-fly/ss-fly.sh -bbr 装完后需要重启系统，输入y即可立即重启，或者之后输入reboot命令重启(部分系统已开启BBR加速，则无需安装和重启，如Vultr的Ubuntu 18+）。 判断BBR加速有没有开启成功： 1sysctl net.ipv4.tcp_available_congestion_control 如果返回值为： net.ipv4.tcp_available_congestion_control = bbr cubic reno 即 = 后面有bbr，则说明已经开启成功了。 KCPTUN加速Kcptun 是一个非常简单和快速的，基于 KCP 协议的 UDP 隧道，它可以将 TCP 流转换为 KCP+UDP 流。而 KCP 是一个快速可靠协议，能以比 TCP 浪费10%-20%的带宽的代价，换取平均延迟降低 30%-40%，且最大延迟降低三倍的传输效果。Kcptun 是 KCP 协议的一个简单应用，可以用于任意 TCP 网络程序的传输承载，以提高网络流畅度，降低掉线情况。由于 Kcptun 使用 Go 语言编写，内存占用低（经测试，在64M内存服务器上稳定运行），而且适用于所有平台，甚至 Arm 平台。 TCP是为流量设计的（每秒内可以传输多少KB的数据），讲究的是充分利用带宽。而 KCP是为流速设计的（单个数据包从一端发送到一端需要多少时间），以10%-20%带宽浪费的代价换取了比 TCP快30%-40%的传输速度。TCP信道是一条流速很慢，但每秒流量很大的大运河，而KCP是水流湍急的小激流。 项目地址:https://github.com/xtaci/kcptun 发布版（下载）地址:https://github.com/xtaci/kcptun/releases kcptun也分为客户端（KCP Client）和服务器端（KCP Server），两端分别将SS/SSR的TCP转为KCP进行数据传输。所以，使用kcptun加速，本机需要安装SS/SSR和kcptun的客户端，服务器需要安装SS/SSR和kcptun的服务端。 本机安装两个客户端比较麻烦，并且，iOS目前没有kcp的客户端软件（Android的SS客户端中可以安装kcptun插件，也可以选择单独安装kcptun客户端），因此，另一个可行的办法是添加中间服务器，比如使用阿里云进行转接，即将kcptun的客户端安装在中间服务器上，然后所有的连接端设备都只需要安装SS/SSR客户端，然后连接到中间服务器的kcptun端口上。 具体配置过程如下： 在客户端和服务器端分别下载对应版本的压缩包,每个压缩包里包含两个文件，分别为客户端和服务器端文件。版本按照机器的实际情况选择（操作系统，cpu架构）。例如，客户端为Windows、服务端为Linux则分别下载对应的两个版本，解压后客户端保留Windows客户端文件，Windows服务端文件丢弃不用，Linux服务端则保留Linux服务端文件，Linux客户端文件丢弃不用。如果vps服务器为Linux，并且使用阿里云Linux服务器为中间服务器，则直接下载Linux版的压缩包，解压后服务端文件和客户端文件分别放在vps和中间服务器上即可。 下载可以选择直接点击相应版本的链接下载，解压后上传至服务器，也可用wget命令直接在服务器上下载，然后解压。以Linux-amd-64位版为例，下载命令为： 1wget https://github.com/xtaci/kcptun/releases/download/v20200201/kcptun-linux-amd64-20200201.tar.gz 解压： 1tar zxvf kcptun-linux-amd64-20200201.tar.gz 解压后有两个文件：client_linux_amd64 和 server_linux_amd64 ,分别为客户端和服务端文件（Windows客户端下载Windows版客户端文件）。 将两个文件分别放在服务器和客户端之后，就可以开始配置并启动服务了，下面以Linux服务器和Linux客户端为例。 服务端KCP Server： 执行命令： 1nohup ./server_linux_amd64 -t &quot;TARGET_IP:8080&quot; -l &quot;:29900&quot; -mode fast3 -nocomp -sockbuf 16777217 -dscp 46 &amp; nohup 及最后的 &amp; 表示将服务放到后台运行。参数部分，其中 TARGET_IP 为SS/SSR服务器IP地址，因为kcptun也运行在服务端，所以这里就是本机IP，即 127.0.0.1 ,端口8080为SS/SSR服务的端口。本地监听（local listen, -l)端口29900为kcptun服务监听端口（与kcptun客户端服务连接所使用的端口）。 mode 参数为加速模式（fast3, fast2, fast, normal, manual）fast3最快但是也最消耗流量。其他参数详见GitHub项目的readme。 如果嫌命令参数太长，也可以将配置参数写在json文件中，使用 -c 参数（config)直接从文件中读取配置信息。命令如下： 1nohup ./server_linux_amd64 -c server.json &amp; 服务端json配置文件内容如下： &emsp;server.json1234567{ &quot;listen&quot;: &quot;:29900&quot;, &quot;target&quot;: &quot;127.0.0.1:8080&quot;, &quot;key&quot;: &quot;kcptun&quot;, &quot;crypt&quot;: &quot;none&quot;, &quot;mode&quot;: &quot;fast3&quot;} 其中，key 为kcptun客户端和服务端之间的密码，客户端配置文件中的 key 值要与这里保持一致，不填该参数也可以（默认值 default: &quot;it's a secrect&quot;)。crypt 为加密方式，复杂的加密方式会导致速度变慢，一般默认的 aes 加密就行了，或者直接不加密 none ,因为SS/SSR本身就已经有加密了。 客户端KCP Client： 执行命令： 1nohup ./client_linux_amd64 -r &quot;KCP_SERVER_IP:29900&quot; -l &quot;:8080&quot; -mode fast3 -nocomp -autoexpire 900 -sockbuf 16777217 -dscp 46 &amp; 参数部分，其中，KCP_SERVER_IP 为kcptun服务器IP地址，端口29900为kcptun服务器的服务监听端口。本地监听（local listen, -l)端口8080为kcptun服务端监听端口（与SS/SSR客户端连接的端口）。 同样的，也可以将配置参数写在json文件中，直接从文件中读取配置信息。命令如下： 1nohup ./client_linux_amd64 -c client.json &amp; 客户端json配置文件内容如下： &emsp;client.json1234567{ &quot;localaddr&quot;: &quot;:8080&quot;, &quot;remoteaddr&quot;: &quot;KCP_SERVER_IP:29900&quot;, &quot;key&quot;: &quot;kcptun&quot;, &quot;crypt&quot;: &quot;none&quot;, &quot;mode&quot;: &quot;fast3&quot;} 原始的连接为：Application -&gt; Target Server(8080/tcp)配置完成后整体的代理流程为：Application -&gt; KCP Client(8080/tcp) -&gt; KCP Server(29900/udp) -&gt; Target Server(8080/tcp) 注：以上为中间服务器（Linux）的kcptun客户端配置方法，如果直接在本机Windows上安装kcptun客户端，可以使用官方的命令行方式安装（kcptun-windows-386为Windows32位版，kcptun-windows-amd64为Windows64位版），也可以直接使用kcptun的Windows版图形界面（kcptun_gclientv.1.1.3.zip，非官方），搭配kcptun客户端使用。以Windows64位为例，以上两个压缩包解压后，将client_windows_amd64.exe和kcptun_gclient.exe放在一起方便使用，打开图像化界面，填写相应的配置参数后就可以正常使用了。 SS/SSR客户端搭建各个平台的代理软件都在GitHub上，可以根据自己电脑/手机的平台以及服务端所使用的代理类型（SS/SSR）选择相应的版本下载。以Windows的shadowsocks为例,到shadowsocks客户端最新发布版页面（SSR到shadowsocksR客户端最新发布版），下载压缩包，解压安装（shadowsocks.exe）即可。 安装完成后根据服务器配置，填入相应的配置信息： 在shadowsocks的windows客户端中，服务器IP指你购买的VPS的IP，服务器端口指你服务器的配置文件中的端口，密码指你服务器的配置文件中的密码，加密指你服务器的配置文件中的加密方式，代理端口默认为1080不需要改动。设置好后，点击添加按钮即可。 注：如果加速方式为kcptun，则服务器IP为kcptun客户端IP地址（若客户端安装在本地，则IP地址填127.0.0.1，若客户端安装在中间服务器上，则IP地址填中间服务器IP地址。 右击任务栏右下角的小飞机图标，可以设置相应的属性项，包括开启自启，显示日志，PAC设置，系统代理模式等等。其中系统代理模式中的全局模式是指所有的请求都走代理（国内以及国外的），而PAC模式则是自动识别，国内的直连，国外的（例如Google，YouTube）走代理。 如果你的某个特定的网址不能通过PAC模式访问，通常情况下是指如YouTube头像无法加载，或者你某些网站直接无法打开，你可以尝试通过全局模式解决。如果不希望走全局模式，那么可以在Windows客户端中设置PAC，使用本地的PAC，再在规则中加入相应网站即可。 接下来就可以愉快地科学上网了 ᕕ(ᐛ)ᕗ","link":"/2020/01/30/vpn%E9%85%8D%E7%BD%AE/"}],"tags":[{"name":"C++","slug":"C","link":"/tags/C/"},{"name":"ngrok","slug":"ngrok","link":"/tags/ngrok/"},{"name":"ssh","slug":"ssh","link":"/tags/ssh/"},{"name":"vps配置","slug":"vps配置","link":"/tags/vps%E9%85%8D%E7%BD%AE/"}],"categories":[{"name":"C++","slug":"C","link":"/categories/C/"},{"name":"工具","slug":"工具","link":"/categories/%E5%B7%A5%E5%85%B7/"}]}