{"pages":[],"posts":[{"title":"test pic","text":"第一章 第二章测试图片: 参考文献dyfromnil.github.io","link":"/2020/01/30/test-pic/"},{"title":"科学上网-vps配置","text":"整理了一份科学上网指南，包括vps服务器的配置，客户端的配置和加速方案。 shadowsocks基本原理&emsp;&emsp;shadowsocks可以指一种SOCKS5的加密传输协议，也可以指基于这种加密协议的各种数据传输包。shadowsocks正常工作需要服务器端和客户端两端合作实现，首先，客户端（本机）通过ss（shadowsocks）对正常的访问请求进行SOCK5加密，将加密后的访问请求传输给ss服务器端，服务器端接收到客户端的加密请求后，解密得到原始的访问请求，根据请求内容访问指定的网站（例如Google，YouTube，Facebook，instagram等），得到网站的返回结果后，再利用SOCKS5加密并返回给客户端，客户端通过ss解密后得到正常的访问结果，于是造成了你可以直接访问该网站的“假象”。 vps服务器的选择&emsp;&emsp;服务器的购买推荐Vultr和搬瓦工，这两个vps服务商是比较大的厂商，比较稳定（不会跑路喽）。不过近年来国内用的人比较多，所以经常会分配到已经被封的ip（搬瓦工似乎是保证开到的ip绝对可用）。 &emsp;&emsp;本指南中搭建shadowsocks/shadowsocksR的shell脚本，适用Vultr的和搬瓦工所有机型（CentOS、Ubuntu、Debian），搭建的ss服务器支持所有客户端类型（iOS，Android，Windows，Mac，Linux）。 脚本搭建SS/SSR服务&emsp;&emsp;服务器购买完成后可以通过Xshell,PuTTY等工具，或者直接通过terminal进行ssh连接。这是PuTTY的连接界面： 服务器的ip和root登录密码可以在自己vps账户的服务器信息页面查看： 连接成功: 连接上服务器后就可以将下面的命令直接复制到命令行中执行了。 下面开始搭建SS/SSR服务：&emsp;&emsp;本指南中搭建服务的脚本由flyzy所写，由于某些原因，源代码已丢失，现在的这份脚本为本人fork而来。 注意： shadowsocks和shadowsocksR只需要搭建其中一个就行了，具体搭建哪个随便自己。 搭建ShadowSocks(SS) 下载SS脚本（只需要执行一次，卸载SS后也不需要重新执行，卸载不会删除下载的文件） 1git clone https://github.com/dyfromnil/ss-fly 如果提示 bash: git: command not found ,则需要先安装git。 Centos执行这个: 1yum -y install git Ubuntu/Debian执行这个: 1apt-get update &amp;&amp; apt-get -y install git 运行搭建SS的代码 1ss-fly/ss-fly.sh -i password port password和port分别改为自己设置的shadowsocks密码和端口号，搭建成功的界面如下： 注：如果需要改密码或者改端口，只需要重新再执行一次搭建ss脚本代码就可以了，或者修改/etc/shadowsocks.json 这个配置文件。 SS相关命令 123456789启动：/etc/init.d/ss-fly start停止：/etc/init.d/ss-fly stop重启：/etc/init.d/ss-fly restart状态：/etc/init.d/ss-fly status查看ss链接：ss-fly/ss-fly.sh -sslink修改配置文件：vim /etc/shadowsocks.json卸载ss服务：ss-fly/ss-fly.sh -uninstall 搭建shadowsocksR(SSR) 注：如果安装了SS，就不需要再安装SSR了，如果要改装SSR，请按照SS的相关命令先卸载SS！！！ 下载SSR脚本（只需要执行一次，卸载SSR后也不需要重新执行，卸载不会删除下载的文件） 1git clone https://github.com/dyfromnil/ss-fly 此步骤与搭建SS一致，可以参考：下载SS脚本。 运行搭建SSR的代码 1ss-fly/ss-fly.sh -ssr 输入相应的参数 &emsp;&emsp;执行完上述的脚本代码后，会进入到输入参数的界面，包括服务器端口，密码，加密方式，协议，混淆。可以直接输入回车选择默认值，也可以输入相应的值选择对应的选项： 搭建成功的界面如下： SSR相关命令 12345678910启动：/etc/init.d/shadowsocks start停止：/etc/init.d/shadowsocks stop重启：/etc/init.d/shadowsocks restart状态：/etc/init.d/shadowsocks status配置文件路径：/etc/shadowsocks.json日志文件路径：/var/log/shadowsocks.log代码安装目录：/usr/local/shadowsocks卸载SSR服务：./shadowsocksR.sh uninstall 加速方案目前比较主流的加速方案有： 锐速 原版BBR 魔改BBR KCPTUN 速度： KCPTUN &gt; 魔改BBR &gt; 锐速 &gt; 原版BBR 安装难易度（由易到难）： 原版BBR &gt; 魔改BBR &gt; 锐速 &gt; KCPTUN BBR加速 &emsp;&emsp;BBR是Google的一套拥塞控制算法，用在VPS服务器上，可以有效减少拥堵丢包，大幅提高网络连接速度. &emsp;&emsp;目前Linux类系统的最新内核，都已内置BBR。而我们购买VPS服务器时安装的系统，一般都不是最新的内核。在CentOS、Debian、Ubuntu等Linux系统上，可以通过升级最新内核的方式，获取BBR。 &emsp;&emsp;BBR支持4.9以上的，如果低于这个版本则会自动下载最新内容版本的内核后开启BBR加速并 重启，如果高于4.9以上则自动开启BBR加速，执行如下脚本命令即可自动开启BBR加速： 1ss-fly/ss-fly.sh -bbr &emsp;&emsp;装完后需要重启系统，输入y即可立即重启，或者之后输入reboot命令重启(部分系统已开启BBR加速，则无需安装和重启，如Vultr的Ubuntu 18+）。 判断BBR加速有没有开启成功： 1sysctl net.ipv4.tcp_available_congestion_control 如果返回值为： net.ipv4.tcp_available_congestion_control = bbr cubic reno 即 = 后面有bbr，则说明已经开启成功了。 KCPTUN加速 后续补充..... 客户端搭建shadowsocks/shadowsockR代理&emsp;&emsp;各个平台的代理软件都在GitHub上，可以根据自己电脑/手机的平台以及服务端所使用的代理类型（SS/SSR）选择相应的版本下载。以Windows的shadowsocks为例,到shadowsocks客户端最新发布版页面（SSR到shadowsocksR客户端最新发布版），下载压缩包，解压安装（shadowsocks.exe）即可。有兴趣的话可以选择源码安装。 安装完成后根据服务器配置，填入相应的配置信息： 在shadowsocks的windows客户端中，服务器IP指你购买的VPS的IP，服务器端口指你服务器的配置文件中的端口，密码指你服务器的配置文件中的密码，加密指你服务器的配置文件中的加密方式，代理端口默认为1080不需要改动。设置好后，点击添加按钮即可。 右击任务栏右下角的小飞机图标，可以设置相应的属性项，包括开启自启，显示日志，PAC设置，系统代理模式等等。其中系统代理模式中的全局模式是指所有的请求都走代理（国内以及国外的），而PAC模式则是自动识别，国内的直连，国外的（例如Google，YouTube）走代理。 如果你的某个特定的网址不能通过PAC模式访问，通常情况下是指如YouTube头像无法加载，或者你某些网站直接无法打开，你可以尝试通过全局模式解决。如果不希望走全局模式，那么可以在Windows客户端中设置PAC，使用本地的PAC，再在规则中加入相应网站即可。 接下来就可以愉快地科学上网了 ᕕ(ᐛ)ᕗ lskd aslkdjf skdf","link":"/2020/01/30/vpn%E9%85%8D%E7%BD%AE/"}],"tags":[{"name":"a","slug":"a","link":"/tags/a/"},{"name":"b","slug":"b","link":"/tags/b/"},{"name":"vps配置","slug":"vps配置","link":"/tags/vps%E9%85%8D%E7%BD%AE/"}],"categories":[{"name":"测试","slug":"测试","link":"/categories/%E6%B5%8B%E8%AF%95/"},{"name":"工具","slug":"工具","link":"/categories/%E5%B7%A5%E5%85%B7/"}]}